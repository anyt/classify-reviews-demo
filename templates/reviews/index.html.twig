{% extends 'base.html.twig' %}

{% block body %}
    <canvas id="scoresChart" style="width: 50%; float: left;"></canvas>
    <canvas id="categoriesChart" style="width: 50%; float: left;"></canvas>
    <div style="clear: both;"></div>

    <table border="1" style="width: 100%; margin-top: 20px;">
        <thead>
        <tr>
            <th>Message</th>
            <th>Score</th>
            <th>Category</th>
        </tr>
        </thead>
        <tbody>
        {% for review in scoredReviews %}
            <tr>
                <td>{{ review.message }}</td>
                <td>{{ review.score }}</td>
                <td>{{ review.categories|join(',') }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const scoredReviews = {{ scoredReviews|json_encode|raw }};
        let categoriesData = {
            "good": 0,
            "bad": 0,
            "neutral": 0,
            "spam": 0
        };

        let scoreCounts = {
            0: 0,
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0
        };

        scoredReviews.forEach(review => {
            scoreCounts[review.score]++;
            categoriesData[review.categories]++;
        });

        const labels = Object.keys(scoreCounts);
        const scores = Object.values(scoreCounts);

        // Bar chart for scores
        const scoresCtx = document.getElementById('scoresChart').getContext('2d');
        new Chart(scoresCtx, {
            type: 'bar',
            data: {
                labels: labels, // This will be ["0", "1", ... "10"]
                datasets: [{
                    label: 'Number of Reviews',
                    data: scores, // The number of reviews for each score
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        // Removing the max value so the y-axis scales according to the data
                    },
                    x: {
                        beginAtZero: true,
                        max: 10  // Setting max value as 10 since score is between 0 to 10
                    }
                }
            }
        });


        // Pie chart for categories
        const categoriesCtx = document.getElementById('categoriesChart').getContext('2d');
        new Chart(categoriesCtx, {
            type: 'pie',
            data: {
                labels: Object.keys(categoriesData),
                datasets: [{
                    data: Object.values(categoriesData),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.5)',
                        'rgba(54, 162, 235, 0.5)',
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(75, 192, 192, 0.5)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)'
                    ],
                    borderWidth: 1
                }]
            }
        });

    </script>
{% endblock %}
